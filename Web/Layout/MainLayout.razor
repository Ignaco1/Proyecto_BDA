@inherits LayoutComponentBase
@inject AuthenticationStateProvider AuthStateProvider

<MudThemeProvider />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>

    <MudAppBar Elevation="2" Dense="true" Class="appbar-vita">
        <MudIconButton Icon="@Icons.Material.Filled.Menu"
                       Color="Color.Inherit"
                       Edge="Edge.Start"
                       Disabled="@(!_isAuthenticated)"
                       OnClick="@((e) => DrawerToggle())" />
        <MudImage Src="images/vita-logo.png" Alt="Vita Stays" Height="50" Class="mr-2" />
        <MudText Typo="Typo.h5" Class="text-appbar">Vita Stays</MudText>
        <MudSpacer />
        <MudText Typo="Typo.body1" Class="text-appbar mr-3">
            <AuthLinks />
        </MudText>
    </MudAppBar>

    <AuthorizeView>
        <Authorized>
            <MudDrawer @bind-Open="_drawerOpen"
                       Variant="DrawerVariant.Responsive"
                       Breakpoint="Breakpoint.Lg"
                       DisableOverlay="true"
                       Elevation="1"
                       Width="300px"
                       Class="drawer-vita">

                <MudDrawerHeader Class="px-4 py-3">
                    <MudImage Src="images/vita-logo.png" Alt="Vita Stays" Height="57" Class="mr-2" />
                    <MudText Typo="Typo.subtitle2" Class="text-drawer">Alojamiento de Cabañas</MudText>
                </MudDrawerHeader>

                <NavMenu />
            </MudDrawer>
        </Authorized>
    </AuthorizeView>

    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.Large" Class="mt-10 px-4 pb-6">
            @Body
        </MudContainer>
    </MudMainContent>

</MudLayout>

@code {
    private bool _drawerOpen;
    private bool _isAuthenticated;

    protected override async Task OnInitializedAsync()
    {
        // estado inicial
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        _isAuthenticated = authState.User.Identity?.IsAuthenticated ?? false;

        // escuchar cambios de login/logout
        AuthStateProvider.AuthenticationStateChanged += OnAuthChanged;
    }

    private async void OnAuthChanged(Task<AuthenticationState> task)
    {
        var state = await task;
        _isAuthenticated = state.User.Identity?.IsAuthenticated ?? false;

        // opcional: cerrar el drawer al cambiar de usuario
        if (!_isAuthenticated) _drawerOpen = false;

        await InvokeAsync(StateHasChanged);
    }

    void DrawerToggle()
    {
        if (_isAuthenticated)
            _drawerOpen = !_drawerOpen;
    }

    // buena práctica: desuscribirse
    public void Dispose()
    {
        AuthStateProvider.AuthenticationStateChanged -= OnAuthChanged;
    }
}

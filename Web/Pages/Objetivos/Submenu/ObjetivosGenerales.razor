@page "/objetivosGenerales"

@using Domain.Enums
@using Domain.DTOs.Responses
@using Web.Pages.Objetivos.Operaciones
@inject IRequestService RequestService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject IDialogService DialogService

<PageTitle>Objetivos — Generales</PageTitle>

<MudStack Class="mb-3" Row="true" Justify="Justify.FlexStart">
    <MudText Typo="Typo.h5" Class="text-vita-dark fw-bold">
        Lista de objetivos generales
    </MudText>
</MudStack>


<MudStack Class="mb-3" Row="true" Justify="Justify.FlexStart">
    <MudButton Class="btn-vita"
               Variant="Variant.Filled"
               StartIcon="@Icons.Material.Filled.Add"
               OnClick="AddOpenDialogGeneral">
        Nuevo objetivo general
    </MudButton>
</MudStack>

@if (_objetivosGenerales == null)
{
    <div class="d-flex justify-center align-center" style="height: 60vh;">
        <Loading />
    </div>
}
else
{
    <MudTable Items="@_objetivosOrdenados" Hover="true" SortLabel="Ordenar por">
        <HeaderContent>
            <MudTh><MudTableSortLabel SortBy="new Func<ObjetivoResponseDto, object>(x => x.Id)">Id</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<ObjetivoResponseDto, object>(x => x.Año)">Año</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<ObjetivoResponseDto, object>(x => x.MetaOcupacion)">Meta Ocupación</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<ObjetivoResponseDto, object>(x => x.FechaCreacion)">Fecha Creación</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<ObjetivoResponseDto, object>(x => x.IsActive)">Estado</MudTableSortLabel></MudTh>
            <MudTh></MudTh>
        </HeaderContent>

        <RowTemplate>
            <MudTd DataLabel="Id">@context.Id</MudTd>
            <MudTd DataLabel="Año">@context.Año</MudTd>
            <MudTd DataLabel="Meta Ocupación">@($"{context.MetaOcupacion}%")</MudTd>
            <MudTd DataLabel="Fecha Creación">@context.FechaCreacion.ToString("dd/MM/yyyy")</MudTd>

            <MudTd DataLabel="Estado">
                @if (context.IsActive)
                {
                    <MudChip T="string" Color="Color.Success" Variant="Variant.Filled" Label="true">Activo</MudChip>
                }
                else
                {
                    <MudChip T="string" Color="Color.Error" Variant="Variant.Outlined" Label="true">Inactivo</MudChip>
                }
            </MudTd>

            <MudTd>
                <MudIconButton Icon="@Icons.Material.Filled.Edit"
                               Color="Color.Default"
                               Style="color:#4a4a4a"
                               OnClick="() => OpenEditObjetivoGeneral(context)"
                               Size="Size.Small" />
            </MudTd>
        </RowTemplate>

        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
}

@code {
    private IEnumerable<ObjetivoResponseDto>? _objetivosGenerales;
    private IEnumerable<ObjetivoResponseDto>? _objetivosOrdenados;

    protected override async Task OnInitializedAsync() => await LoadObjetivosGenerales();

    private async Task LoadObjetivosGenerales()
    {
        try
        {
            var todos = await RequestService.GetAsync<IEnumerable<ObjetivoResponseDto>>("api/objetivos");
            _objetivosGenerales = todos?.Where(o => o.Tipo == TipoObjetivo.General);

            _objetivosOrdenados = _objetivosGenerales?
                .OrderByDescending(o => o.FechaCreacion)
                .ThenByDescending(o => o.Año)
                .ToList();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error al cargar los objetivos generales: {ex.Message}", Severity.Error);
        }
    }

    private async Task AddOpenDialogGeneral()
    {
        try
        {
            var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall, FullWidth = true };

            var parameters = new DialogParameters { ["TipoObjetivoSeleccionado"] = TipoObjetivo.General };

            var dialog = await DialogService.ShowAsync<AddObjetivo>("", parameters, options);
            var result = await dialog.Result;

            if (!result!.Canceled)
            {
                await LoadObjetivosGenerales();
                Snackbar.Add("Objetivo general creado exitosamente.", Severity.Success);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error al crear el objetivo: {ex.Message}", Severity.Error);
        }
    }

    private async Task OpenEditObjetivoGeneral(ObjetivoResponseDto objetivo)
    {
        try
        {
            var parameters = new DialogParameters { ["Objetivo"] = objetivo };

            var options = new DialogOptions
            {
                CloseButton = true,
                MaxWidth = MaxWidth.Small,
                FullWidth = true
            };

            var dialog = await DialogService.ShowAsync<EditObjetivo>("", parameters, options);
            var result = await dialog.Result;

            if (!result!.Canceled)
            {
                await LoadObjetivosGenerales();
                Snackbar.Add("Objetivo general actualizado exitosamente.", Severity.Success);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Ocurrió un error: {ex.Message}", Severity.Error);
        }
    }
}

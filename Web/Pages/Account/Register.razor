@page "/register"

<MudContainer MaxWidth="MaxWidth.ExtraSmall" Class="mt-12">
    <MudPaper Class="pa-6 rounded-lg" Elevation="20">

        <!-- Título marca en azul oscuro (0,40,81) -->
        <MudText Typo="Typo.h4" Class="text-center mb-1" Style="color:#002851">
            Vita Stays
        </MudText>

        <MudText Typo="Typo.subtitle1" Class="text-center mb-6" Style="color:#414141">
            Registro de Usuario
        </MudText>

        <!-- Nombre -->
        <MudTextField @bind-Value="user.Name"
                      Label="Nombre"
                      Variant="Variant.Outlined"
                      FullWidth="true"
                      Margin="Margin.Dense"
                      Required="true"
                      RequiredError="El nombre es obligatorio."
                      Immediate="true"
                      HelperText="Por favor, ingresa tu nombre." />

        <!-- Email -->
        <MudTextField @bind-Value="user.Email"
                      Label="Correo Electrónico"
                      Variant="Variant.Outlined"
                      FullWidth="true"
                      Margin="Margin.Dense"
                      Required="true"
                      RequiredError="El correo es obligatorio."
                      Immediate="true"
                      HelperText="Debe tener al menos un arroba y un dominio."
                      Class="mt-4"
                      InputType="InputType.Email" />

        <!-- Contraseña -->
        <MudTextField @bind-Value="user.Password"
                      Label="Contraseña"
                      Variant="Variant.Outlined"
                      FullWidth="true"
                      Margin="Margin.Dense"
                      Required="true"
                      RequiredError="La contraseña es obligatoria."
                      Immediate="true"
                      HelperText="La contraseña es obligatoria."
                      Class="mt-4"
                      InputType="@PasswordInput"
                      Adornment="Adornment.End"
                      AdornmentIcon="@PasswordInputIcon"
                      OnAdornmentClick="ButtonTestclick"
                      AdornmentAriaLabel="Mostrar/Ocultar" />

        <!-- Teléfono -->
        <MudTextField @bind-Value="user.PhoneNumber"
                      Label="Teléfono"
                      Variant="Variant.Outlined"
                      FullWidth="true"
                      Margin="Margin.Dense"
                      Required="true"
                      RequiredError="El teléfono es obligatorio."
                      Immediate="true"
                      HelperText="Incluye el código de área." />

        <!-- Botón Registrar (azul oscuro, hover celeste) -->
        <MudButton Class="mt-6 w-100 btn-vita"
                   Variant="Variant.Filled"
                   Disabled="@isSubmitting"
                   OnClick="HandleRegister">
            @(isSubmitting ? "Registrando..." : "Registrar")
        </MudButton>

        <!-- Frase de abajo con color de marca -->
        <MudText Class="text-center mt-4 form-note">
            ¿Ya tienes cuenta?
            <MudLink Href="/login" Class="link-vita"> Inicia sesión aquí</MudLink>
        </MudText>
    </MudPaper>
</MudContainer>


@code {
    private CreateUserDto user = new CreateUserDto();
    private bool isSubmitting;

    public string Password { get; set; } = string.Empty;
    private bool isShow;
    private InputType PasswordInput = InputType.Password;
    private string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    [Inject] private ISnackbar Snackbar { get; set; } = null!;
    [Inject] private HttpClient HttpClient { get; set; } = null!;
    [Inject] private NavigationManager NavigationManager { get; set; } = null!;
    [Inject] private IDialogService DialogService { get; set; } = null!;

    protected override void OnInitialized()
    {
        Password = user.Password;
    }

    private void ButtonTestclick()
    {
        if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }

    private bool ValidateInputs()
    {
        var ok = true;

        user.Name = user.Name?.Trim();
        user.Email = user.Email?.Trim();
        user.Password = user.Password?.Trim();
        user.PhoneNumber = user.PhoneNumber?.Trim();

        if (string.IsNullOrWhiteSpace(user.Name))
        {
            Snackbar.Add("El nombre es obligatorio.", Severity.Error);
            ok = false;
        }

        if (string.IsNullOrWhiteSpace(user.Email))
        {
            Snackbar.Add("El correo es obligatorio.", Severity.Error);
            ok = false;
        }
        else
        {
            if (!user.Email.Contains('@') || user.Email.StartsWith("@") || user.Email.EndsWith("@") || !user.Email.Contains("."))
            {
                Snackbar.Add("El correo debe contener un '@' válido y debe llevar un formato como este: nacho@gmail.com.", Severity.Error);
                ok = false;
            }
        }

        if (string.IsNullOrWhiteSpace(user.Password))
        {
            Snackbar.Add("La contraseña es obligatoria.", Severity.Error);
            ok = false;
        }

        if (string.IsNullOrWhiteSpace(user.PhoneNumber))
        {
            Snackbar.Add("El teléfono es obligatorio.", Severity.Error);
            ok = false;
        }

        return ok;
    }

    private async Task HandleRegister()
    {
        if (isSubmitting) return;

        if (!ValidateInputs())
            return;

        try
        {
            isSubmitting = true;

            user.Email = user.Email!.ToLowerInvariant();

            var url = "api/auth/register";
            var response = await HttpClient.PostAsJsonAsync(url, user);

            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Registro exitoso.", Severity.Success);
                await Task.Delay(800);
                NavigationManager.NavigateTo("/login");
                return;
            }

            if (response.StatusCode == System.Net.HttpStatusCode.Conflict)
            {
                Snackbar.Add("El correo electrónico ya está en uso.", Severity.Warning);
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.BadRequest)
            {
                var details = await response.Content.ReadAsStringAsync();
                Snackbar.Add($"Datos inválidos. {details}", Severity.Error);
            }
            else
            {
                Snackbar.Add("Error al registrar el usuario.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error al registrar: {ex.Message}", Severity.Error);
        }
        finally
        {
            isSubmitting = false;
        }
    }
}

@page "/reservas"

@using Domain.DTOs.Responses
@using Domain.Enums
@using System.Globalization

@inject IRequestService RequestService
@inject ISnackbar Snackbar

<PageTitle>Reservas</PageTitle>

<MudStack Class="mb-3" Row="true" Justify="Justify.FlexStart">
    <MudText Typo="Typo.h5" Class="text-vita-dark fw-bold">
        Lista de reservas
    </MudText>
</MudStack>

<MudStack Class="mb-4" Row="true" Spacing="2" AlignItems="AlignItems.Center">

    <!-- 🔹 Filtro por cabaña -->
    <MudSelect T="int?" Label="Cabaña" @bind-Value="_filtroCabañaId" Dense="true" Style="min-width:220px;" DisableUnderline="true">
        <MudSelectItem T="int?" Value="null">Todas</MudSelectItem>
        @if (_cabañas != null)
        {
            @foreach (var cab in _cabañas)
            {
                <MudSelectItem T="int?" Value="@cab.Id">@cab.Nombre</MudSelectItem>
            }
        }
    </MudSelect>

    <!-- 🔹 Filtro por estado -->
    <MudSelect T="EstadosReserva?" Label="Estado" @bind-Value="_filtroEstado" Dense="true" Style="min-width:220px;" DisableUnderline="true">
        <MudSelectItem T="EstadosReserva?" Value="null">Todos</MudSelectItem>
        <MudSelectItem T="EstadosReserva?" Value="EstadosReserva.Pendiente">Pendiente</MudSelectItem>
        <MudSelectItem T="EstadosReserva?" Value="EstadosReserva.Activa">Activa</MudSelectItem>
        <MudSelectItem T="EstadosReserva?" Value="EstadosReserva.Finalizada">Finalizada</MudSelectItem>
    </MudSelect>

    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="FiltrarReservas">
        <MudIcon Icon="@Icons.Material.Filled.Search" />
        Filtrar
    </MudButton>
</MudStack>

@if (_reservas is null)
{
    <div class="d-flex justify-center align-center" style="height: 60vh;">
        <Loading />
    </div>
}
else
{
    <MudTable Items="_reservas" Hover="true" Elevation="2" Dense="true">
        <HeaderContent>
            <MudTh>Cabaña</MudTh>
            <MudTh>Cliente</MudTh>
            <MudTh>Entrada</MudTh>
            <MudTh>Salida</MudTh>
            <MudTh>Estado</MudTh>
            <MudTh style="text-align:right;">Total</MudTh>
        </HeaderContent>

        <RowTemplate>
            <MudTd>@context.NombreCabaña</MudTd>
            <MudTd>@context.NombreCliente</MudTd>
            <MudTd DataLabel="Entrada">@context.FechaEntrada.ToString("dd/MM/yyyy")</MudTd>
            <MudTd DataLabel="Salida">@context.FechaSalida.ToString("dd/MM/yyyy")</MudTd>

            <MudTd DataLabel="Estado">
                @{
                    var (color, label) = EstadoVisual(context.Estado);
                }
                <MudChip T="string" Color="@color" Variant="Variant.Filled" Label="true">@label</MudChip>
            </MudTd>

            <MudTd DataLabel="Total" Style="text-align:right;">
                @context.Total.ToString("C", new CultureInfo("es-AR"))
            </MudTd>
        </RowTemplate>
    </MudTable>
}

@code {
    private IEnumerable<ReservaResponseDto>? _reservas;
    private IEnumerable<CabañaResponseDto>? _cabañas;

    private int? _filtroCabañaId = null;
    private EstadosReserva? _filtroEstado = null;

    private async Task CargarDatosAsync()
    {
        try
        {
            _cabañas = await RequestService.GetAsync<IEnumerable<CabañaResponseDto>>("api/cabañas");
            await FiltrarReservas();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error al cargar los datos: {ex.Message}", Severity.Error);
        }
    }


    private async Task FiltrarReservas()
    {
        try
        {
            var all = await RequestService.GetAsync<IEnumerable<ReservaResponseDto>>("api/reservas");

            _reservas = all
            .Where(r => r.Estado != EstadosReserva.Cancelada)
            .Where(r => !_filtroCabañaId.HasValue || r.IdCabaña == _filtroCabañaId)
            .Where(r => !_filtroEstado.HasValue || r.Estado == _filtroEstado)
            .ToList();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error al filtrar: {ex.Message}", Severity.Error);
        }
    }
    
    protected override async Task OnInitializedAsync()
    {
        await CargarDatosAsync();
    }

    private static (Color color, string label) EstadoVisual(EstadosReserva estado)
        => estado switch
        {
            EstadosReserva.Pendiente  => (Color.Warning,  "Pendiente"),
            EstadosReserva.Activa     => (Color.Info,     "Activa"),
            EstadosReserva.Finalizada => (Color.Success,  "Finalizada"),
            EstadosReserva.Cancelada  => (Color.Error,    "Cancelada"),
            _                         => (Color.Default,  "—")
        };
}
